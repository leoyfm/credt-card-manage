---
description: 
globs: test_*.py
alwaysApply: false
---
# 测试架构说明文档

## 📋 概述

本文档描述了信用卡管理系统后端的优化测试架构，提供了三层测试结构，支持不同类型的测试需求。

## 🏗️ 测试架构设计

### 核心设计理念

1. **分层测试**: 单元测试 → 集成测试 → 性能测试
2. **统一接口**: 通过基础类封装公共测试方法
3. **客户端抽象**: 支持FastAPI TestClient和Requests两种客户端
4. **配置驱动**: 通过配置文件管理不同测试类型
5. **自动化运行**: 统一的测试运行器支持选择性执行

### 目录结构

```
tests/
├── base_test.py                      # 测试基础设施
├── test_runner.py                    # 统一测试运行器
├── conftest.py                       # pytest配置和fixture
├── unit/                            # 单元测试（FastAPI TestClient）
│   ├── test_recommendations_unit.py
│   └── test_statistics_unit.py
├── integration/                     # 集成测试（真实HTTP请求）
│   ├── test_recommendations_integration.py
│   └── test_statistics_integration.py
├── performance/                     # 性能测试（基准测试）
│   ├── test_recommendations_performance.py
│   └── test_statistics_performance.py
├── legacy/                         # 原有测试文件（兼容性）
│   ├── test_cards.py
│   ├── test_transactions.py
│   └── ...
├── TESTING_ARCHITECTURE.md         # 本文档
└── README.md                       # 测试使用说明
```

## 🧪 测试类型详解

### 1. 单元测试 (Unit Tests)

**位置**: `tests/unit/`
**客户端**: FastAPI TestClient
**特点**:
- ✅ 快速执行（毫秒级）
- ✅ 无外部依赖
- ✅ 可并行执行
- ✅ 适合CI/CD
- ✅ 测试内部逻辑

**示例**:
```python
from tests.base_test import FastAPITestClient, BaseRecommendationTest

@pytest.mark.unit
class TestRecommendationsUnit(BaseRecommendationTest):
    def setup_class(self):
        self.client = FastAPITestClient()
        self.setup_test_user()
```

### 2. 集成测试 (Integration Tests)

**位置**: `tests/integration/`
**客户端**: Requests HTTP客户端
**特点**:
- 🌐 真实HTTP请求
- 🔗 端到端测试
- 🛡️ 网络层验证
- 🚀 需要手动启动服务器（主进程模式）
- 📊 真实用户场景

**示例**:
```python
from tests.base_test import RequestsTestClient, BaseRecommendationTest

@pytest.mark.integration
@pytest.mark.requires_server
class TestRecommendationsIntegration(BaseRecommendationTest):
    def setup_class(self):
        self.client = RequestsTestClient()
        self._check_server_availability()
```

### 3. 性能测试 (Performance Tests)

**位置**: `tests/performance/`
**客户端**: FastAPI TestClient（稳定性）
**特点**:
- ⚡ 性能基准测试
- 📈 响应时间分析
- 🚀 并发压力测试
- 💾 内存使用监控
- 📊 详细性能报告

**架构模式**（重要更新）:
```python
from tests.base_test import FastAPITestClient, BaseRecommendationTest, TestPerformanceMixin

@pytest.mark.performance
@pytest.mark.slow
class TestRecommendationsPerformance(TestPerformanceMixin):
    def setup_method(self):
        """使用setup_method而不是pytest fixture"""
        self.client = FastAPITestClient()
        self.api_test = BaseRecommendationTest(self.client)
        self.api_test.setup_test_user()
    
    def test_performance_benchmark(self):
        """通过组合模式调用API测试方法"""
        metrics = self._measure_multiple_requests(
            lambda: self.api_test.test_get_user_profile(),
            count=100
        )
        assert metrics["avg_response_time"] < 0.5
```

## 🛠️ 核心组件

### BaseTestClient 抽象类

提供统一的HTTP客户端接口：

```python
class BaseTestClient(ABC):
    @abstractmethod
    def get(self, url: str, headers: Optional[Dict] = None, params: Optional[Dict] = None):
        pass
    
    @abstractmethod  
    def post(self, url: str, json: Optional[Dict] = None, headers: Optional[Dict] = None):
        pass
```

**实现类**:
- `FastAPITestClient`: 基于FastAPI TestClient
- `RequestsTestClient`: 基于requests库

### BaseAPITest 基础类

封装通用测试方法：

```python
class BaseAPITest:
    def setup_test_user(self) -> Dict[str, Any]:
        """自动注册和登录测试用户"""
        
    def create_test_card(self, card_data: Optional[Dict] = None) -> Dict[str, Any]:
        """创建测试信用卡"""
        
    def assert_api_success(self, response, expected_status: int = 200) -> Dict[str, Any]:
        """断言API响应成功"""
        
    def assert_pagination_response(self, data: Dict[str, Any]) -> None:
        """断言分页响应格式"""
```

### 专用测试基类

- `BaseRecommendationTest`: 推荐接口测试基类
- `BaseStatisticsTest`: 统计接口测试基类  
- `TestPerformanceMixin`: 性能测试混入类
- `TestDataGenerator`: 测试数据生成器

## 📋 依赖要求

### 必需的Python包

```txt
# 核心测试依赖
pytest>=7.0.0
pytest-asyncio>=0.20.0
pytest-xdist>=3.0.0          # 并行测试支持
pytest-cov>=4.0.0            # 覆盖率测试
requests>=2.28.0             # 集成测试HTTP客户端

# 可选依赖
pytest-timeout>=2.1.0         # 性能测试超时控制（可选）
pytest-benchmark>=4.0.0      # 性能基准测试（可选）
pytest-html>=3.0.0           # HTML测试报告（可选）
```

### 安装建议

```bash
# 安装核心依赖（必需）
pip install pytest pytest-asyncio pytest-xdist pytest-cov requests

# 安装可选依赖（推荐）
pip install pytest-timeout pytest-benchmark pytest-html

# 或者使用项目的requirements文件
pip install -r requirements.txt
```

## 🚀 运行测试

### 使用测试运行器（推荐）

```bash
# 列出可用测试类型
python tests/test_runner.py list

# 运行单元测试
python tests/test_runner.py unit

# 运行集成测试（需要手动启动服务器）
# 第一步：在另一个终端启动服务器
python start.py dev
# 第二步：运行集成测试
python tests/test_runner.py integration

# 运行性能测试
python tests/test_runner.py performance

# 运行所有测试
python tests/test_runner.py all

# 详细输出模式
python tests/test_runner.py unit -v

# 生成测试报告
python tests/test_runner.py all -r
```

### 直接使用pytest

```bash
# 运行单元测试
pytest tests/unit/ -m unit

# 运行集成测试（需要手动启动服务器）
pytest tests/integration/ -m integration

# 运行性能测试
pytest tests/performance/ -m performance

# 运行特定测试文件
pytest tests/unit/test_recommendations_unit.py -v

# 排除慢速测试
pytest -m "not slow"

# 并行执行单元测试
pytest tests/unit/ -n auto

# 带超时控制的性能测试（需要pytest-timeout插件）
pytest tests/performance/ -m performance --timeout=300
```

## 📊 性能基准

### 响应时间基准

| 接口类型 | 平均响应时间 | P95响应时间 | 每秒请求数 |
|----------|--------------|-------------|------------|
| 用户画像 | < 0.5s | < 1.0s | > 20 RPS |
| 推荐生成 | < 2.0s | < 5.0s | > 5 RPS |
| 推荐列表 | < 0.3s | < 1.0s | > 30 RPS |
| 搜索功能 | < 0.8s | < 2.0s | > 15 RPS |

### 并发性能基准

| 并发级别 | 成功率 | 平均响应时间 | 备注 |
|----------|--------|--------------|------|
| 5并发 | > 95% | < 1.0s | 轻负载 |
| 10并发 | > 90% | < 2.0s | 中负载 |
| 20并发 | > 85% | < 3.0s | 重负载 |

## 🔧 配置和定制

### pytest标记（已修复）

```ini
[pytest]
markers =
    unit: 单元测试（使用FastAPI TestClient）
    integration: 集成测试（真实HTTP请求）
    performance: 性能测试（基准测试和压力测试）
    legacy: 原有测试文件
    slow: 运行时间较长的测试
    requires_server: 需要运行服务器的测试
    auth: 认证相关测试
    crud: CRUD操作测试
    statistics: 统计功能测试
```

### 测试配置

```python
# tests/test_runner.py 中的配置
test_configs = {
    "unit": {
        "description": "单元测试 (FastAPI TestClient)",
        "path": "tests/unit/",
        "pattern": "test_*_unit.py",
        "markers": "unit",
        "parallel": True,
        "coverage": True
    },
    "integration": {
        "description": "集成测试 (真实HTTP请求)",
        "path": "tests/integration/",
        "pattern": "test_*_integration.py",
        "markers": "integration", 
        "requires_server": True
    },
    "performance": {
        "description": "性能测试 (基准测试和压力测试)",
        "path": "tests/performance/",
        "pattern": "test_*_performance.py",
        "markers": "performance",
        "timeout": 300  # 可选，需要pytest-timeout插件
    }
}
```

## ❗ 常见问题和解决方案

### 1. pytest标记警告

**问题**: `Unknown pytest.mark.integration` 警告

**解决方案**: 
- 确保`pytest.ini`使用正确的节名`[pytest]`而不是`[tool:pytest]`
- 检查文件编码，确保没有中文乱码
- 运行`pytest --markers`验证标记已注册

### 2. 集成测试服务器启动

**问题**: 集成测试需要服务器运行但启动复杂

**解决方案**: 
- 集成测试不再自动启动服务器，避免进程管理复杂性
- 要求用户手动启动服务器作为主进程: `python start.py dev`
- 测试运行器只检查服务器是否可用，并提供清晰的启动指导

### 3. 性能测试架构错误

**问题**: 性能测试类使用`@pytest.fixture`导致错误

**解决方案**: 
- 使用`setup_method()`替代`@pytest.fixture(scope="class", autouse=True)`
- 使用组合模式：`self.api_test = BaseRecommendationTest(self.client)`
- 调用方式：`self.api_test.test_xxx()`而不是`self.test_xxx()`

### 4. pytest-timeout插件缺失

**问题**: `unrecognized arguments: --timeout 300`

**解决方案**: 
```bash
# 安装pytest-timeout插件
pip install pytest-timeout

# 或者从测试配置中移除timeout设置
# 在test_runner.py中删除或注释timeout配置
```

### 5. Windows PowerShell兼容性

**问题**: 在Windows PowerShell中运行测试出现编码或进程问题

**解决方案**: 
- 测试运行器已增加Windows兼容性处理
- 使用正确的进程终止方式（`terminate()`而不是`kill()`）
- 正确处理编码问题

### 6. pytest无法收集测试文件

**问题**: `collected 0 items` 或测试类无法被发现

**原因**: 
- 测试类继承了`BaseAPITest`但没有正确初始化父类
- 使用了错误的类构造方式导致pytest无法识别测试方法

**解决方案**: 
```python
# ❌ 错误方式 - 直接继承BaseAPITest
class TestTransactionsUnit(BaseAPITest):
    def setup_method(self):
        super().__init__(client)  # 会导致pytest无法收集

# ✅ 正确方式 - 使用组合模式
class TestTransactionsUnit:
    def setup_method(self):
        self.client = FastAPITestClient()
        self.api_test = BaseAPITest(self.client)  # 组合而不是继承
        self.test_user = self.api_test.setup_test_user()
        self.headers = {"Authorization": f"Bearer {self.test_user['token']}"}
```

### 7. API响应字段不匹配

**问题**: 测试期望的字段名与实际API返回的字段不一致

**常见不匹配情况**:
- 分页字段：期望`page`实际为`current_page`
- 统计字段：期望`total_expense`实际为`expense_amount`
- 分页大小：期望`size`实际为`page_size`

**解决方案**: 
```python
# 检查实际API响应格式，更新测试期望
# 分页响应
assert data["pagination"]["current_page"] == 1  # 不是page
assert data["pagination"]["page_size"] == 5     # 不是size

# 统计响应  
assert "expense_amount" in data  # 不是total_expense
assert "income_amount" in data   # 不是total_income
```

### 8. 枚举值和数据验证错误

**问题**: 测试使用了API不支持的枚举值导致422或500错误

**常见错误枚举**:
- 交易类型：`"income"`（应使用`"payment"`）
- 交易分类：`"grocery"`（应使用`"other"`）
- 无效UUID格式导致500而不是400错误

**解决方案**: 
```python
# 使用正确的枚举值
valid_transaction_types = ["expense", "payment", "refund", "transfer", "withdrawal", "fee"]
valid_categories = ["dining", "shopping", "transport", "entertainment", "medical", "education", "travel", "other"]

# 对于错误处理测试，期望实际的状态码
assert response.status_code in [400, 500]  # 后端可能返回500而不是400
```

### 9. 接口路径和参数不匹配

**问题**: 测试使用的接口路径与实际API不符

**常见路径错误**:
- 月度趋势：`/statistics/monthly`（应为`/statistics/monthly-trend`）
- 日期参数：简单date格式（应为datetime格式）

**解决方案**: 
```python
# 使用正确的接口路径
response = self.client.get("/api/transactions/statistics/monthly-trend")  # 不是monthly

# 使用正确的日期时间格式
start_date = "2024-06-05T00:00:00"  # 不是 "2024-06-05"
end_date = "2024-06-10T23:59:59"    # 不是 "2024-06-10"
```

## 🎯 最佳实践

### 1. 测试命名规范

```python
# 单元测试
tests/unit/test_[module]_unit.py
class Test[Module]Unit:
    def test_01_[specific_functionality](self):

# 集成测试
tests/integration/test_[module]_integration.py  
class Test[Module]Integration:
    def test_01_[user_scenario](self):

# 性能测试（修复后的架构）
tests/performance/test_[module]_performance.py
class Test[Module]Performance(TestPerformanceMixin):
    def setup_method(self):
        self.client = FastAPITestClient()
        self.api_test = Base[Module]Test(self.client)
        
    def test_01_[performance_aspect](self):
        # 通过组合模式调用API测试
        result = self.api_test.test_xxx()
```

### 2. 测试数据管理

```python
# 使用TestDataGenerator生成测试数据
test_cards = TestDataGenerator.generate_test_cards(5)
test_transactions = TestDataGenerator.generate_test_transactions(card_id, 10)

# 每个测试类使用独立的测试用户
self.setup_test_user()  # 自动生成唯一用户
```

### 3. 性能测试规范（更新）

```python
# 正确的性能测试架构
class TestAPIPerformance(TestPerformanceMixin):
    def setup_method(self):
        """使用setup_method而不是fixture"""
        self.client = FastAPITestClient()
        self.api_test = BaseAPITest(self.client)
        self.api_test.setup_test_user()
    
    def test_response_time(self):
        """测量单次请求性能"""
        metrics = self._measure_response_time(
            lambda: self.api_test.test_specific_api(),
            max_time=1.0
        )
        
    def test_batch_performance(self):
        """测量批量请求性能"""
        self._test_batch_operations_performance(
            lambda: self.api_test.test_specific_api(),
            count=50,
            max_avg_time=2.0
        )
```

### 4. 错误处理和验证

```python
# 统一的响应验证
data = self.assert_api_success(response, expected_status=200)

# 统一的错误验证
self.assert_api_error(response, expected_status=404)

# 分页响应验证
self.assert_pagination_response(data, min_items=0)
```

### 5. 服务器管理

```python
# 集成测试中的服务器检查
def _check_server_availability(self):
    """检查服务器是否可用，如果不可用则给出提示"""
    try:
        response = self.client.get("/api/health")
        if response.status_code != 200:
            raise Exception(f"服务器不可用: {response.status_code}")
    except Exception as e:
        pytest.skip(f"服务器不可用，跳过集成测试: {str(e)}")
```

## 🔄 持续优化

### 测试覆盖率监控

```bash
# 运行带覆盖率的测试
pytest tests/unit/ --cov=. --cov-report=html --cov-report=term-missing

# 查看覆盖率报告
open htmlcov/index.html
```

### 性能监控

```bash
# 运行性能测试并生成报告
python tests/test_runner.py performance -v -r

# 查看性能报告
cat tests/TEST_REPORT.md
```

### 测试维护

1. **定期更新基准**: 根据系统性能变化调整性能基准
2. **清理过时测试**: 删除不再相关的测试用例
3. **更新测试数据**: 保持测试数据与业务场景同步
4. **优化测试速度**: 持续优化测试执行时间
5. **依赖管理**: 定期更新测试依赖包版本

## 🏃‍♂️ 快速开始

### 1. 环境准备

```bash
# 确保已安装所有依赖
pip install -r requirements.txt

# 验证pytest配置
pytest --markers
```

### 2. 运行第一个测试

```bash
# 运行单元测试（最快）
python tests/test_runner.py unit -v

# 查看测试结果
# 如果成功，继续运行其他测试类型
```

### 3. 完整测试流程

```bash
# 1. 单元测试
python tests/test_runner.py unit

# 2. 集成测试（需要手动启动服务器）
# 终端1: 启动服务器
python start.py dev
# 终端2: 运行集成测试
python tests/test_runner.py integration

# 3. 性能测试
python tests/test_runner.py performance

# 4. 生成完整报告（需要服务器运行）
python tests/test_runner.py all -r
```

## 📚 相关文档

- [README.md](./README.md) - 测试使用说明
- [RECOMMENDATIONS_TEST_SUMMARY.md](./RECOMMENDATIONS_TEST_SUMMARY.md) - 推荐接口测试总结
- [conftest.py](./conftest.py) - pytest配置和fixture
- [pytest.ini](../pytest.ini) - pytest配置文件

## 🤝 贡献指南

1. **新增测试**: 按照三层架构添加对应类型的测试
2. **扩展基类**: 在base_test.py中添加通用方法
3. **更新配置**: 在test_runner.py中添加新的测试配置
4. **文档更新**: 及时更新架构文档和使用说明
5. **问题反馈**: 遇到问题请参考"常见问题和解决方案"章节

## 🔖 版本历史

- **v2.1** (当前): 完善常见问题文档，新增pytest收集问题、API字段不匹配、枚举值错误等解决方案
- **v2.0**: 修复性能测试架构，添加服务器自动管理，完善错误处理
- **v1.5**: 添加集成测试支持，统一客户端抽象
- **v1.0**: 初始版本，基础的三层测试架构

---

这个测试架构为信用卡管理系统提供了全面、可扩展、易维护的测试解决方案。通过统一的接口和分层的设计，既保证了测试的覆盖率，又提供了灵活的测试执行策略。所有已知问题都已修复，确保测试框架的稳定性和可靠性。 

## 信用卡模块测试说明

### 测试覆盖范围

信用卡模块的测试覆盖以下功能：

#### 单元测试 (`test_cards_unit.py`)
- **基础CRUD操作**: 创建、查询、更新、删除信用卡
- **年费管理集成**: 带年费的信用卡创建和管理
- **数据验证**: 卡号格式、有效期、额度等字段验证
- **分页和搜索**: 列表查询、关键词搜索、分页功能
- **权限验证**: 用户认证、数据隔离测试
- **边界条件**: 无效数据、重复卡号、超长字段等

#### 集成测试 (`test_cards_integration.py`)
- **完整生命周期**: 端到端的信用卡管理流程
- **年费功能集成**: 年费规则的完整测试
- **网络层验证**: HTTP响应头、JSON序列化
- **并发操作**: 多个请求同时处理
- **安全性测试**: 认证要求、用户数据隔离
- **数据完整性**: 重复防护、数据验证
- **响应时间**: 基本的性能验证

#### 性能测试 (`test_cards_performance.py`)
- **单次操作基准**: 各类操作的响应时间要求
- **批量操作测试**: 批量创建、查询的性能表现
- **并发压力测试**: 多用户同时操作的性能
- **搜索性能**: 关键词搜索的响应时间
- **分页性能**: 不同页面的查询性能
- **年费功能性能**: 复杂年费逻辑的性能影响
- **综合场景**: 模拟真实用户使用的性能表现

### 性能基准

| 操作类型 | 目标时间 | 说明 |
|---------|---------|------|
| 创建信用卡 | < 2.0秒 | 单张卡片创建 |
| 查询详情 | < 1.0秒 | 单张卡片查询 |
| 更新信用卡 | < 2.0秒 | 单张卡片更新 |
| 获取列表 | < 1.5秒 | 分页列表查询 |
| 搜索功能 | < 1.0秒 | 关键词搜索 |
| 创建年费卡片 | < 3.0秒 | 包含年费规则创建 |
| 5并发创建 | 成功率≥80% | 并发创建测试 |
| 10并发查询 | 成功率≥95% | 并发查询测试 |

### 运行信用卡测试

```bash
# 运行信用卡单元测试
python tests/test_runner.py unit --filter=cards

# 运行信用卡集成测试（需要先启动服务器）
python start.py dev  # 终端1
python tests/test_runner.py integration --filter=cards  # 终端2

# 运行信用卡性能测试
python tests/test_runner.py performance --filter=cards

# 运行特定测试文件
pytest tests/unit/test_cards_unit.py -v
pytest tests/integration/test_cards_integration.py -v  
pytest tests/performance/test_cards_performance.py -v
```

### 测试数据管理

信用卡测试使用专门的测试数据生成器：

- **CardTestDataGenerator**: 单元测试数据生成
- **CardIntegrationTestDataGenerator**: 集成测试数据生成  
- **CardPerformanceDataGenerator**: 性能测试数据生成

每个生成器都确保：
- 唯一的卡号生成（避免重复）
- 真实的测试数据格式
- 自动的测试数据清理
- 时间戳标识，便于调试

### 测试最佳实践

1. **测试隔离**: 每个测试方法都有独立的数据
2. **资源清理**: 测试完成后自动清理创建的数据
3. **错误处理**: 完善的异常情况测试
4. **性能监控**: 持续监控API性能表现
5. **并发安全**: 验证多用户同时操作的安全性

## 统计功能模块测试说明

### 测试覆盖范围

统计功能模块提供全方位的数据统计测试覆盖：

#### 单元测试 (`test_statistics_unit.py`) - 30个测试用例
- **基础统计测试(8个)**: 概览、信用卡、额度、交易、年费、分类、月度、银行统计
- **查询参数筛选(6个)**: 日期筛选、银行筛选、卡片筛选、数量限制、包含注销卡片
- **边界条件测试(6个)**: 无效日期、未来日期、无效ID、超大/负数限制值、空参数
- **权限安全测试(3个)**: 未授权访问、无效令牌、数据隔离验证
- **性能响应测试(7个)**: 响应时间、并发请求、复杂筛选、数据一致性、接口可访问性

#### 集成测试 (`test_statistics_integration.py`) - 12个测试用例
- **端到端测试(4个)**: 完整统计流程、跨模块数据一致性、实时数据反映、多用户隔离
- **复杂业务场景(3个)**: 综合筛选场景、负载下性能、数据聚合准确性
- **网络协议测试(3个)**: HTTP头验证、响应压缩、错误处理恢复
- **并发完整性(2个)**: 并发操作完整性、综合集成场景

#### 性能测试 (`test_statistics_performance.py`) - 12个测试用例
- **单次操作性能(5个)**: 概览、卡片、交易、分类、月度趋势统计性能
- **批量操作性能(3个)**: 多次请求、筛选条件、全接口顺序执行性能
- **并发性能测试(2个)**: 并发概览请求、并发不同统计请求
- **压力测试(2个)**: 高负载性能、持续负载性能

### 性能基准

| 统计类型 | 目标响应时间 | 并发成功率 | 吞吐量要求 |
|----------|-------------|-----------|-----------|
| 统计概览 | < 3.0秒 | ≥80% | > 3 req/s |
| 信用卡统计 | < 1.5秒 | ≥90% | > 5 req/s |
| 交易统计 | < 2.0秒 | ≥85% | > 4 req/s |
| 分类统计 | < 1.5秒 | ≥90% | > 5 req/s |
| 月度趋势 | < 2.0秒 | ≥85% | > 4 req/s |
| 筛选统计 | < 5.0秒 | ≥80% | > 2 req/s |
| 全接口顺序 | < 8.0秒 | ≥80% | - |
| 高负载场景 | < 10.0秒 | ≥70% | - |

### 统计API接口

```
/api/statistics/overview       # 统计概览（综合所有统计数据）
/api/statistics/cards          # 信用卡统计  
/api/statistics/credit-limit   # 信用额度统计
/api/statistics/transactions   # 交易统计
/api/statistics/annual-fee     # 年费统计
/api/statistics/categories     # 消费分类统计
/api/statistics/monthly-trends # 月度趋势统计
/api/statistics/banks          # 银行分布统计
```

### 运行统计功能测试

```bash
# 运行统计单元测试
python tests/test_runner.py unit --filter=statistics
pytest tests/unit/test_statistics_unit.py -v

# 运行统计集成测试（需要先启动服务器）
python start.py dev  # 终端1
python tests/test_runner.py integration --filter=statistics  # 终端2
pytest tests/integration/test_statistics_integration.py -v

# 运行统计性能测试
python tests/test_runner.py performance --filter=statistics
pytest tests/performance/test_statistics_performance.py -v

# 运行特定测试方法
pytest tests/unit/test_statistics_unit.py::TestStatisticsUnit::test_01_get_statistics_overview_success -v
```

### 测试数据生成器

统计功能测试使用专门的数据生成器：

- **StatisticsTestDataGenerator**: 单元测试数据（信用卡、交易）
- **StatisticsIntegrationTestDataGenerator**: 集成测试数据（多卡多交易）
- **StatisticsPerformanceDataGenerator**: 性能测试数据（大批量数据）

### 统计功能特色测试

1. **多维度筛选测试**: 时间范围、银行、卡片、状态等多重筛选组合
2. **数据聚合验证**: 分类占比、月度趋势、银行分布的数学一致性
3. **实时数据反映**: 新增交易后统计数据的实时更新验证
4. **跨模块一致性**: 统计数据与业务模块数据的一致性验证

5. **高并发稳定性**: 多用户同时查询统计的性能和准确性 