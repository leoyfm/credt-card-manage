"""Add transaction and annual fee models

Revision ID: e406c35896a4
Revises: 70d08106d550
Create Date: 2025-06-13 13:42:46.256350

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e406c35896a4'
down_revision: Union[str, None] = '70d08106d550'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('transaction_categories',
    sa.Column('id', sa.UUID(), nullable=False, comment='分类ID'),
    sa.Column('name', sa.String(length=50), nullable=False, comment='分类名称'),
    sa.Column('icon', sa.String(length=50), nullable=True, comment='图标'),
    sa.Column('color', sa.String(length=20), nullable=True, comment='颜色'),
    sa.Column('parent_id', sa.UUID(), nullable=True, comment='父分类ID'),
    sa.Column('is_system', sa.Boolean(), nullable=True, comment='是否系统分类'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='是否激活'),
    sa.Column('sort_order', sa.Integer(), nullable=True, comment='排序'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='创建时间'),
    sa.ForeignKeyConstraint(['parent_id'], ['transaction_categories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('fee_waiver_rules',
    sa.Column('id', sa.UUID(), nullable=False, comment='规则ID'),
    sa.Column('card_id', sa.UUID(), nullable=False, comment='信用卡ID'),
    sa.Column('rule_group_id', sa.UUID(), nullable=True, comment='规则组ID(同组规则用AND连接)'),
    sa.Column('rule_name', sa.String(length=100), nullable=False, comment='规则名称'),
    sa.Column('condition_type', sa.String(length=20), nullable=False, comment='条件类型: spending_amount, transaction_count, points_redeem, specific_category'),
    sa.Column('condition_value', sa.DECIMAL(precision=15, scale=2), nullable=True, comment='条件数值'),
    sa.Column('condition_count', sa.Integer(), nullable=True, comment='条件次数'),
    sa.Column('condition_period', sa.String(length=20), nullable=True, comment='统计周期: monthly, quarterly, yearly'),
    sa.Column('logical_operator', sa.String(length=10), nullable=True, comment='逻辑操作符: AND, OR, NULL'),
    sa.Column('priority', sa.Integer(), nullable=True, comment='优先级'),
    sa.Column('is_enabled', sa.Boolean(), nullable=True, comment='是否启用'),
    sa.Column('effective_from', sa.Date(), nullable=True, comment='生效日期'),
    sa.Column('effective_to', sa.Date(), nullable=True, comment='失效日期'),
    sa.Column('description', sa.Text(), nullable=True, comment='规则说明'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='创建时间'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='更新时间'),
    sa.ForeignKeyConstraint(['card_id'], ['credit_cards.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transactions',
    sa.Column('id', sa.UUID(), nullable=False, comment='交易ID'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='用户ID'),
    sa.Column('card_id', sa.UUID(), nullable=False, comment='信用卡ID'),
    sa.Column('category_id', sa.UUID(), nullable=True, comment='分类ID'),
    sa.Column('transaction_type', sa.String(length=20), nullable=False, comment='交易类型: expense, payment, refund, transfer, withdrawal, fee'),
    sa.Column('amount', sa.DECIMAL(precision=15, scale=2), nullable=False, comment='交易金额'),
    sa.Column('currency', sa.String(length=10), nullable=True, comment='货币类型'),
    sa.Column('description', sa.String(length=200), nullable=True, comment='交易描述'),
    sa.Column('merchant_name', sa.String(length=100), nullable=True, comment='商户名称'),
    sa.Column('merchant_category', sa.String(length=50), nullable=True, comment='商户类别'),
    sa.Column('location', sa.String(length=200), nullable=True, comment='交易地点'),
    sa.Column('points_earned', sa.Integer(), nullable=True, comment='获得积分'),
    sa.Column('cashback_earned', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='获得返现'),
    sa.Column('status', sa.String(length=20), nullable=True, comment='状态: pending, completed, failed, refunded'),
    sa.Column('transaction_date', sa.TIMESTAMP(timezone=True), nullable=True, comment='交易时间'),
    sa.Column('notes', sa.Text(), nullable=True, comment='备注'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='标签'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='创建时间'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='更新时间'),
    sa.ForeignKeyConstraint(['card_id'], ['credit_cards.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['category_id'], ['transaction_categories.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('annual_fee_records',
    sa.Column('id', sa.UUID(), nullable=False, comment='记录ID'),
    sa.Column('card_id', sa.UUID(), nullable=False, comment='信用卡ID'),
    sa.Column('waiver_rule_id', sa.UUID(), nullable=True, comment='减免规则ID'),
    sa.Column('fee_year', sa.Integer(), nullable=False, comment='年费年份'),
    sa.Column('base_fee', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='基础年费'),
    sa.Column('actual_fee', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='实际年费'),
    sa.Column('waiver_amount', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='减免金额'),
    sa.Column('waiver_rules_applied', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='应用的减免规则'),
    sa.Column('rule_evaluation_result', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='规则评估结果'),
    sa.Column('waiver_reason', sa.String(length=100), nullable=True, comment='减免原因'),
    sa.Column('calculation_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='计算详情'),
    sa.Column('status', sa.String(length=20), nullable=True, comment='状态: pending, paid, waived, overdue'),
    sa.Column('due_date', sa.Date(), nullable=True, comment='应缴日期'),
    sa.Column('paid_date', sa.Date(), nullable=True, comment='实际缴费日期'),
    sa.Column('payment_method', sa.String(length=20), nullable=True, comment='支付方式: auto_deduct, manual, points, waived'),
    sa.Column('notes', sa.Text(), nullable=True, comment='备注'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='创建时间'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='更新时间'),
    sa.ForeignKeyConstraint(['card_id'], ['credit_cards.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['waiver_rule_id'], ['fee_waiver_rules.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('annual_fee_records')
    op.drop_table('transactions')
    op.drop_table('fee_waiver_rules')
    op.drop_table('transaction_categories')
    # ### end Alembic commands ###
