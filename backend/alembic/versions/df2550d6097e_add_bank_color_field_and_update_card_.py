"""add_bank_color_field_and_update_card_number

Revision ID: df2550d6097e
Revises: e406c35896a4
Create Date: 2025-06-15 13:07:17.964019

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'df2550d6097e'
down_revision: Union[str, None] = 'e406c35896a4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('reminder_settings_backup')
    op.drop_table('reminder_records_backup')
    op.alter_column('annual_fee_records', 'waiver_rule_id',
               existing_type=sa.UUID(),
               comment='年费规则ID',
               existing_comment='减免规则ID',
               existing_nullable=True)
    op.alter_column('annual_fee_records', 'waiver_reason',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=200),
               existing_comment='减免原因',
               existing_nullable=True)
    op.alter_column('annual_fee_records', 'payment_method',
               existing_type=sa.VARCHAR(length=20),
               comment='支付方式',
               existing_comment='支付方式: auto_deduct, manual, points, waived',
               existing_nullable=True)
    op.drop_constraint('annual_fee_records_waiver_rule_id_fkey', 'annual_fee_records', type_='foreignkey')
    op.create_foreign_key(None, 'annual_fee_records', 'fee_waiver_rules', ['waiver_rule_id'], ['id'], ondelete='CASCADE')
    op.add_column('credit_cards', sa.Column('bank_color', sa.String(length=20), nullable=True, comment='卡片颜色'))
    # 为现有记录设置默认颜色值
    op.execute("UPDATE credit_cards SET bank_color = '#EF4444' WHERE bank_color IS NULL")
    # 设置字段为非空并添加默认值
    op.alter_column('credit_cards', 'bank_color', nullable=False, server_default='#EF4444')
    op.alter_column('credit_cards', 'card_number',
               existing_type=sa.VARCHAR(length=100),
               comment='卡号后4位',
               existing_comment='卡号(加密存储)',
               existing_nullable=False)
    op.alter_column('recommendation_records', 'action_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               comment='行动数据',
               existing_comment='行动数据(JSON格式)',
               existing_nullable=True)
    op.drop_index('idx_recommendation_records_created_at', table_name='recommendation_records')
    op.drop_index('idx_recommendation_records_rule_id', table_name='recommendation_records')
    op.drop_index('idx_recommendation_records_status', table_name='recommendation_records')
    op.drop_index('idx_recommendation_records_type', table_name='recommendation_records')
    op.drop_index('idx_recommendation_records_user_action', table_name='recommendation_records')
    op.drop_index('idx_recommendation_records_user_id', table_name='recommendation_records')
    op.drop_index('idx_recommendation_records_user_status', table_name='recommendation_records')
    op.drop_index('idx_recommendation_records_user_type', table_name='recommendation_records')
    op.drop_constraint('recommendation_records_rule_id_fkey', 'recommendation_records', type_='foreignkey')
    op.create_foreign_key(None, 'recommendation_records', 'recommendation_rules', ['rule_id'], ['id'])
    op.drop_table_comment(
        'recommendation_records',
        existing_comment='推荐记录表 - 存储用户推荐记录',
        schema=None
    )
    op.alter_column('recommendation_rules', 'conditions',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               comment='规则条件',
               existing_comment='规则条件(JSON格式)',
               existing_nullable=False)
    op.alter_column('recommendation_rules', 'priority',
               existing_type=sa.INTEGER(),
               comment='优先级',
               existing_comment='优先级(1-10)',
               existing_nullable=True,
               existing_server_default=sa.text('1'))
    op.drop_index('idx_recommendation_rules_active', table_name='recommendation_rules')
    op.drop_index('idx_recommendation_rules_priority', table_name='recommendation_rules')
    op.drop_index('idx_recommendation_rules_type', table_name='recommendation_rules')
    op.drop_table_comment(
        'recommendation_rules',
        existing_comment='推荐规则表 - 存储系统推荐规则配置',
        schema=None
    )
    op.alter_column('reminder_records', 'user_id',
               existing_type=sa.UUID(),
               comment='用户ID',
               existing_nullable=False)
    op.alter_column('reminder_records', 'card_id',
               existing_type=sa.UUID(),
               comment='信用卡ID',
               existing_nullable=True)
    op.alter_column('reminder_records', 'reminder_type',
               existing_type=sa.VARCHAR(length=30),
               comment='提醒类型',
               existing_nullable=False,
               existing_server_default=sa.text("'payment'::character varying"))
    op.alter_column('reminder_records', 'title',
               existing_type=sa.VARCHAR(length=200),
               comment='提醒标题',
               existing_nullable=False,
               existing_server_default=sa.text("'提醒'::character varying"))
    op.alter_column('reminder_records', 'content',
               existing_type=sa.TEXT(),
               comment='提醒内容',
               existing_nullable=False,
               existing_server_default=sa.text("'您有一条新的提醒'::text"))
    op.alter_column('reminder_records', 'email_sent',
               existing_type=sa.BOOLEAN(),
               comment='邮件是否发送',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('reminder_records', 'sms_sent',
               existing_type=sa.BOOLEAN(),
               comment='短信是否发送',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('reminder_records', 'push_sent',
               existing_type=sa.BOOLEAN(),
               comment='推送是否发送',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('reminder_records', 'wechat_sent',
               existing_type=sa.BOOLEAN(),
               comment='微信是否发送',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('reminder_records', 'scheduled_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='计划发送时间',
               existing_nullable=True)
    op.alter_column('reminder_records', 'sent_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='实际发送时间',
               existing_comment='发送时间',
               existing_nullable=True)
    op.drop_index('idx_reminder_records_reminder_type', table_name='reminder_records')
    op.drop_index('idx_reminder_records_sent_at', table_name='reminder_records')
    op.drop_index('idx_reminder_records_user_id', table_name='reminder_records')
    op.create_foreign_key(None, 'reminder_records', 'credit_cards', ['card_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'reminder_records', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('reminder_settings', 'email_enabled',
               existing_type=sa.BOOLEAN(),
               comment='邮件提醒',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('reminder_settings', 'sms_enabled',
               existing_type=sa.BOOLEAN(),
               comment='短信提醒',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('reminder_settings', 'push_enabled',
               existing_type=sa.BOOLEAN(),
               comment='推送提醒',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('reminder_settings', 'wechat_enabled',
               existing_type=sa.BOOLEAN(),
               comment='微信提醒',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('reminder_settings', 'is_recurring',
               existing_type=sa.BOOLEAN(),
               comment='是否循环',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('reminder_settings', 'frequency',
               existing_type=sa.VARCHAR(length=20),
               comment='频率',
               existing_nullable=True,
               existing_server_default=sa.text("'monthly'::character varying"))
    op.drop_index('idx_reminder_settings_reminder_type', table_name='reminder_settings')
    op.drop_index('idx_reminder_settings_user_id', table_name='reminder_settings')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('idx_reminder_settings_user_id', 'reminder_settings', ['user_id'], unique=False)
    op.create_index('idx_reminder_settings_reminder_type', 'reminder_settings', ['reminder_type'], unique=False)
    op.alter_column('reminder_settings', 'frequency',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='频率',
               existing_nullable=True,
               existing_server_default=sa.text("'monthly'::character varying"))
    op.alter_column('reminder_settings', 'is_recurring',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否循环',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('reminder_settings', 'wechat_enabled',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='微信提醒',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('reminder_settings', 'push_enabled',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='推送提醒',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('reminder_settings', 'sms_enabled',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='短信提醒',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('reminder_settings', 'email_enabled',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='邮件提醒',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.drop_constraint(None, 'reminder_records', type_='foreignkey')
    op.drop_constraint(None, 'reminder_records', type_='foreignkey')
    op.create_index('idx_reminder_records_user_id', 'reminder_records', ['user_id'], unique=False)
    op.create_index('idx_reminder_records_sent_at', 'reminder_records', ['sent_at'], unique=False)
    op.create_index('idx_reminder_records_reminder_type', 'reminder_records', ['reminder_type'], unique=False)
    op.alter_column('reminder_records', 'sent_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='发送时间',
               existing_comment='实际发送时间',
               existing_nullable=True)
    op.alter_column('reminder_records', 'scheduled_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='计划发送时间',
               existing_nullable=True)
    op.alter_column('reminder_records', 'wechat_sent',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='微信是否发送',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('reminder_records', 'push_sent',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='推送是否发送',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('reminder_records', 'sms_sent',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='短信是否发送',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('reminder_records', 'email_sent',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='邮件是否发送',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('reminder_records', 'content',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='提醒内容',
               existing_nullable=False,
               existing_server_default=sa.text("'您有一条新的提醒'::text"))
    op.alter_column('reminder_records', 'title',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='提醒标题',
               existing_nullable=False,
               existing_server_default=sa.text("'提醒'::character varying"))
    op.alter_column('reminder_records', 'reminder_type',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='提醒类型',
               existing_nullable=False,
               existing_server_default=sa.text("'payment'::character varying"))
    op.alter_column('reminder_records', 'card_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='信用卡ID',
               existing_nullable=True)
    op.alter_column('reminder_records', 'user_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='用户ID',
               existing_nullable=False)
    op.create_table_comment(
        'recommendation_rules',
        '推荐规则表 - 存储系统推荐规则配置',
        existing_comment=None,
        schema=None
    )
    op.create_index('idx_recommendation_rules_type', 'recommendation_rules', ['rule_type'], unique=False)
    op.create_index('idx_recommendation_rules_priority', 'recommendation_rules', [sa.text('priority DESC')], unique=False)
    op.create_index('idx_recommendation_rules_active', 'recommendation_rules', ['is_active'], unique=False)
    op.alter_column('recommendation_rules', 'priority',
               existing_type=sa.INTEGER(),
               comment='优先级(1-10)',
               existing_comment='优先级',
               existing_nullable=True,
               existing_server_default=sa.text('1'))
    op.alter_column('recommendation_rules', 'conditions',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               comment='规则条件(JSON格式)',
               existing_comment='规则条件',
               existing_nullable=False)
    op.create_table_comment(
        'recommendation_records',
        '推荐记录表 - 存储用户推荐记录',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'recommendation_records', type_='foreignkey')
    op.create_foreign_key('recommendation_records_rule_id_fkey', 'recommendation_records', 'recommendation_rules', ['rule_id'], ['id'], ondelete='SET NULL')
    op.create_index('idx_recommendation_records_user_type', 'recommendation_records', ['user_id', 'recommendation_type'], unique=False)
    op.create_index('idx_recommendation_records_user_status', 'recommendation_records', ['user_id', 'status'], unique=False)
    op.create_index('idx_recommendation_records_user_id', 'recommendation_records', ['user_id'], unique=False)
    op.create_index('idx_recommendation_records_user_action', 'recommendation_records', ['user_action'], unique=False)
    op.create_index('idx_recommendation_records_type', 'recommendation_records', ['recommendation_type'], unique=False)
    op.create_index('idx_recommendation_records_status', 'recommendation_records', ['status'], unique=False)
    op.create_index('idx_recommendation_records_rule_id', 'recommendation_records', ['rule_id'], unique=False)
    op.create_index('idx_recommendation_records_created_at', 'recommendation_records', [sa.text('created_at DESC')], unique=False)
    op.alter_column('recommendation_records', 'action_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               comment='行动数据(JSON格式)',
               existing_comment='行动数据',
               existing_nullable=True)
    op.alter_column('credit_cards', 'card_number',
               existing_type=sa.VARCHAR(length=100),
               comment='卡号(加密存储)',
               existing_comment='卡号后4位',
               existing_nullable=False)
    op.drop_column('credit_cards', 'bank_color')
    op.drop_constraint(None, 'annual_fee_records', type_='foreignkey')
    op.create_foreign_key('annual_fee_records_waiver_rule_id_fkey', 'annual_fee_records', 'fee_waiver_rules', ['waiver_rule_id'], ['id'])
    op.alter_column('annual_fee_records', 'payment_method',
               existing_type=sa.VARCHAR(length=20),
               comment='支付方式: auto_deduct, manual, points, waived',
               existing_comment='支付方式',
               existing_nullable=True)
    op.alter_column('annual_fee_records', 'waiver_reason',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=100),
               existing_comment='减免原因',
               existing_nullable=True)
    op.alter_column('annual_fee_records', 'waiver_rule_id',
               existing_type=sa.UUID(),
               comment='减免规则ID',
               existing_comment='年费规则ID',
               existing_nullable=True)
    op.create_table('reminder_records_backup',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('setting_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('reminder_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('reminder_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('sent_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True)
    )
    op.create_table('reminder_settings_backup',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('card_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('reminder_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('reminder_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('advance_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reminder_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('is_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('notification_methods', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('custom_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('repeat_interval', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True)
    )
    # ### end Alembic commands ###
